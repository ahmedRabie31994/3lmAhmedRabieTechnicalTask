// <auto-generated />
using System;
using AhmedRabieTechnicalTask.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AhmedRabieTechnicalTask.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Customer.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AliasName");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Customer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid?>("CustomerId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("OrderStatus");

                    b.Property<double>("Price");

                    b.Property<string>("SalerName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Customer.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<double>("SalePrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Product.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Auther");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<double>("MaxSalePrice");

                    b.Property<double>("MinSalePrice");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = new Guid("6b29fc40-ca47-1067-b31d-00dd010662da"), Active = true, Auther = "Ahmed Mohamed", Deleted = false, Description = "Ahmed Rabie Book Desctiption", MaxSalePrice = 100.0, MinSalePrice = 50.0, PublishDate = new DateTime(2024, 1, 16, 2, 20, 28, 579, DateTimeKind.Local), Title = "Ahmed Rabie Book Title " },
                        new { Id = new Guid("5b29fc40-ca47-1067-b31d-00dd010662da"), Active = true, Auther = "Mohamed Mohamed", Deleted = false, Description = "Mohamed Title Book Desctiption", MaxSalePrice = 100.0, MinSalePrice = 70.0, PublishDate = new DateTime(2024, 1, 16, 2, 20, 28, 584, DateTimeKind.Local), Title = "Mohamed Title " },
                        new { Id = new Guid("4b29fc40-ca47-1067-b31d-00dd010662da"), Active = true, Auther = "Mohamed Mohamed", Deleted = false, Description = "Mohamed Title Book Desctiption", MaxSalePrice = 100.0, MinSalePrice = 70.0, PublishDate = new DateTime(2024, 1, 16, 2, 20, 28, 584, DateTimeKind.Local), Title = "Mohamed Title 4" }
                    );
                });

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Customer.Entities.Order", b =>
                {
                    b.HasOne("AhmedRabieTechnicalTask.Domain.Customer.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("AhmedRabieTechnicalTask.Domain.Customer.Entities.OrderDetail", b =>
                {
                    b.HasOne("AhmedRabieTechnicalTask.Domain.Customer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("AhmedRabieTechnicalTask.Domain.Product.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
